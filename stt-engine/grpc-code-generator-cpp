#!/bin/sh
basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

working_dir=$(pwd)

while getopts "p:o:" opt; do
  case $opt in
    p)
      proto_dir="$OPTARG"
      ;;
    o)
      output_dir="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# Check if the -p flag is missing or empty
if [ -z "$proto_dir" ] ; then
  echo "Usage: $0 -p <protoFileSearchFolder> [-o <outputFolderRel>]"
  exit 1
fi

static_proto_dir="$(pwd)/$proto_dir"

# Use find to locate all .proto files under pwd/ -p flag directory and store the result in a variable
proto_files=$(find $static_proto_dir/**/* -type f -name "*.proto")

# Echo the list of .proto files
echo "Found the following .proto files in $static_proto_dir"
echo "------------------------------------"
echo "$proto_files"

# Loop through the found .proto files
for proto_file in $proto_files
do
    srcdir=$(dirname "$proto_file")

    # Get the relative part of the other_path
    relative_path="${srcdir#$static_proto_dir}"

    IFS='/' read -r -a folders <<< "$relative_path"
    first_folder_name="${folders[1]}"

    base_output_dir="$static_proto_dir/$first_folder_name"

    # Check if the -o flag is missing or empty
    if [ -z "$output_dir" ] ; then
        outdir="$base_output_dir"
    else
        outdir="$base_output_dir/$output_dir"
    fi

    # Check if the destination directory exists, and create it if it doesn't
    if [ ! -d "$outdir" ]; then
        mkdir -p "$outdir"
    fi

    # Run protoc for C++ code generation
    protoc \
    -I="$base_output_dir"  \
    --cpp_out="$outdir" \
    --grpc_out="$outdir" \
    --plugin=protoc-gen-grpc=/opt/homebrew/bin/grpc_cpp_plugin \
    $proto_file

done
